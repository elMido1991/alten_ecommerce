plugins {
    id 'org.springframework.boot' version '3.2.1'  // Spring Boot plugin
    id 'io.spring.dependency-management' version '1.1.4' // Dependency Management plugin
    id 'com.google.cloud.tools.jib' version '3.1.4'  // Jib plugin
    id 'java'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.google.cloud.tools.jib'

    group = 'com.ecommerce'
    version = '1.0.0'
    sourceCompatibility = '17'

    repositories {
        mavenCentral()
    }

    ext {
        set('springCloudVersion', "2023.0.0")
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

        // MapStruct
        implementation 'org.mapstruct:mapstruct:1.5.5.Final'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

        // MapStruct + Lombok
        annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

        // Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.postgresql:postgresql:42.3.6'  // Use the latest version
    }

    jib {
        to {
            image = "${project.name}:${version}" // Default image name is based on module name
        }
        from {
            image = 'openjdk:17' // Base image updated to openjdk:17
        }
        container {
            jvmFlags = ['-Xms512m', '-Xmx1024m'] // Default JVM options for all submodules
            ports = ['8080'] // Expose port 8080 by default
        }
    }

    test {
        useJUnitPlatform()
    }

}
tasks.withType(JavaCompile) {
    options.annotationProcessorPath = configurations.annotationProcessor
    options.compilerArgs += [
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.defaultInjectionStrategy=constructor'
    ]
}


